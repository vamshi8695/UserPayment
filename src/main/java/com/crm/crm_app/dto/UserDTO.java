package com.crm.crm_app.dto;

// Lombok annotations to reduce boilerplate code
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;  // ðŸ”¹ Generates a constructor with all fields
import lombok.Data;               // ðŸ”¹ Generates getters, setters, toString(), equals(), and hashCode()
import lombok.NoArgsConstructor; // ðŸ”¹ Generates a no-argument constructor

/**
 * UserDTO - Data Transfer Object for User.
 * ðŸ”¸ Used to transfer user data between different layers (Controller <-> Service).
 * ðŸ”¸ Also used in API requests and responses, instead of exposing the entity directly.
 */
@Data  // âœ… Lombok: Automatically generates getters, setters, equals(), hashCode(), and toString()
@AllArgsConstructor  // âœ… Lombok: Creates a constructor with all fields (useful for manual object creation)
@NoArgsConstructor   // âœ… Lombok: Creates a default constructor with no parameters (useful for serialization/deserialization)
public class UserDTO {

    // ðŸ”¸ Unique ID of the user, usually generated by the database
    private Long id;

    // ðŸ”¸ First name of the user (e.g., "John")
    @NotNull(message = "First name cannot be null")
    private String firstName;

    // ðŸ”¸ Last name of the user (e.g., "Doe")
    private String lastName;

    // ðŸ”¸ Email address of the user (e.g., "john.doe@example.com")
    private String email;

    // ðŸ”¸ Phone number of the user (e.g., "+91-9876543210")
    private String phoneNumber;

    // ðŸ”¸ Optional notes about the user (e.g., "VIP customer")
    private String notes;

    // ðŸ”¸ Username for user login (e.g., "johndoe")
    private String username;

    // ðŸ”¸ Password for login (usually should be encrypted and never returned in API responses)
    private String password;

}
